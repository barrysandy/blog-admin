/*
Navicat MySQL Data Transfer

Source Server         : localhost
Source Server Version : 50528
Source Host           : localhost:3306
Source Database       : blog

Target Server Type    : MYSQL
Target Server Version : 50528
File Encoding         : 65001

Date: 2018-08-27 20:08:32
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for t_admin
-- ----------------------------
DROP TABLE IF EXISTS `t_admin`;
CREATE TABLE `t_admin` (
  `id` varchar(100) NOT NULL DEFAULT '',
  `name` varchar(16) DEFAULT '',
  `password` varchar(22) DEFAULT '',
  `descM` text,
  `roleId` varchar(100) DEFAULT '',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Records of t_admin
-- ----------------------------
INSERT INTO `t_admin` VALUES ('02bdc7db3ee746b0b8a9c20ae20855b2', 'admin', '123456', '小五的账号', null);
INSERT INTO `t_admin` VALUES ('fb9a1197383e4865b0fae381e8b4d900', 'laoquan', '123456', '老权儿账号', null);

-- ----------------------------
-- Table structure for t_art
-- ----------------------------
DROP TABLE IF EXISTS `t_art`;
CREATE TABLE `t_art` (
  `id` varchar(100) NOT NULL DEFAULT '',
  `title` varchar(100) DEFAULT '',
  `image` varchar(300) DEFAULT '',
  `descM` text,
  `content` text,
  `typese` varchar(100) DEFAULT '',
  `isResouce` int(2) DEFAULT '0',
  `url` varchar(300) DEFAULT '',
  `createTime` varchar(100) DEFAULT '',
  `updateTime` varchar(100) DEFAULT '',
  `views` int(11) DEFAULT '0',
  `statuses` int(2) DEFAULT '1',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Records of t_art
-- ----------------------------
INSERT INTO `t_art` VALUES ('01a1291e0a7545009b5902a4addeca69', '打个盹符是范德萨发2222', 'http://localhost:9090/admin/images/T_1535161964898R_179405368.JPG', '法国恢复供货', '<p><span style=\"color: rgb(255, 0, 0);\">第一第一第一第一第一第一第一第一第一</span></p><p><img src=\"http://localhost:9090/admin/image/ueditor/jsp/upload/image/20180825/1535159035439076871.jpg\" title=\"1535159035439076871.jpg\" alt=\"zd01.jpg\"/></p><p>焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷。</p><p><img src=\"http://localhost:9090/admin/image/ueditor/jsp/upload/image/20180825/1535161098322061704.jpg\" title=\"1535161098322061704.jpg\" alt=\"微信图片_20180328091005.jpg\"/><br/></p><p><br/></p><p>焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷焚膏继晷。</p><p><br/></p>', '学习', '0', null, '2018-08-23 20:45', '2018-08-25 09:52', '11', '1');
INSERT INTO `t_art` VALUES ('071fbf8c445c444d83fa9a73417177a4', 'JVM虚拟机篇', '/blog/images/zd02.jpg', '本篇详细讲述java虚拟机的内存模型以及垃圾回收机制。', '<p><strong>一、为什么要学习Java虚拟机？</strong></p><p><strong>&nbsp; &nbsp; &nbsp; </strong>这里我们使用举例来说明为什么要学习Java虚拟机，其实这个问题就和为什么要学习数据结构和算法是一个道理，工欲善其事，必先利其器。曾经的我经常害怕处理内存溢出的问题，因为不知道他为什么会出现这个问题，当我在看了这本书以后明白了垃圾回收算法，以及JVM是如何帮助我们处理GC的，这个时候当出现这个问题的时候我就明白需要查找GC\r\n \r\nRoot，或者查看GC日志，去查找这个问题的根源，这样就能处理这些问题。还有以前的在理解重载和重构的时候只是在表面去理解，当我看完这本书明白，原来在方法调用时候这些东西就生成处理，另外还有一个new到底经历那些事情等等一序列问题，如果你还在就纠结一些问题为什么是这么处理的时候那你就去看Java虚拟机吧，或许会有不一样的感悟，以上就是为什么要学习Java虚拟机的原因，可能有部分解释的不是很全面，我想在感悟方面在仔细说一下这个问题。<strong><br/></strong></p><p><strong>二、感悟？</strong></p><p>&nbsp; &nbsp; &nbsp; 其实也算不上什么感悟，只是对一些问题认识更加深刻而已，这里面我们来谈一下GC，要探讨这个问题我们需要从4个方面入手:</p><p>&nbsp; &nbsp; &nbsp; 1.JVM是如何分配内存的？</p><p>&nbsp; &nbsp; &nbsp; 2.如何才能保证正确的回收？</p><p>&nbsp; &nbsp; &nbsp; 3.JVM什么情况下触发GC以及GC的方式？</p><p>　 ４.如何监控和优化GC？</p><p>　首先从JVM内存分布开始：下图是JVM内存分布图</p><p><strong>　<img src=\"https://images2017.cnblogs.com/blog/1005447/201712/1005447-20171210130813552-1636228962.png\" alt=\"\" width=\"362\" height=\"264\"/></strong></p><p>&nbsp;</p><p>　１.线程计数器，是一块较小的内存空间，用来指定当前线程执行字节码的行数，每个线程计数器都是私有的，因为每个线程都需要记录执行的行数；这里解释一下为什么每个线程都需要一个线程计数器，JVM的多线程是通过线程轮流切换分配执行时间来实现的，在任何时刻，每个处理器都只会执行一个线程中的指令，当线程进行切换的时，为了线程能恢复当正确的位置，所以每个线程必须有个独立的线程计数器，这样才能保证线程之间不互相影响。</p><p>　　这里注意下，如果线程执行是一个Java方法的时候，计数器记录的是虚拟机字节码指令的地址；当执行的是Native的方法的时候，计数器指令为空；该内存区域是Java虚拟机唯一没有规定任何OutOfMemoryError的区域。</p><p>　２.Java虚拟栈，这个也是一个线程私有的，生命周期与线程是同步的，每个方法在执行的同时，都会创建一个栈帧，用于存储局部变量表，操作数栈，动态链接，方法出入口等信息，每个方法的调用到执行完成的过程就是一个栈帧入栈到出栈的过程；</p><p>　　这里解释一下局部变量表，局部变量表存储方法相关的局部变量，包括基本数据，对象引用和返回地址等。在局部变量表中，只有long和double类型会占用2个局部变量空间（Slot，对于32位机器，一个Slot就是32个bit），其它都是1个Slot。需要注意的是，局部变量表是在编译时就已经确定好的，方法运行所需要分配的空间在栈帧中是完全确定的，在方法的生命周期内都不会改变。这部分东西我还想等下一篇博客的时候我想仔细说一下字节码的执行过程；</p><p>　　虚拟机栈规定了２种异常情况，一种是线程请求栈的深度大于虚拟机栈所允许的深度，这时候将会抛出StackOverflowError异常，如果当Java虚拟机允许动态扩展虚拟机栈的时候，当扩展的时候没办法分配到内存的时候就会报OutOfMemoryError异常；</p><p>&nbsp; &nbsp; 3.本地方法栈，与虚拟机栈执行的基本相同，唯一的区别就是虚拟机栈是执行Java方法的，本地方法栈是执行native方法的；</p><p>&nbsp; &nbsp; 4.Java堆，堆区是Java虚拟机所管理的内存中最大的一块，Java堆是被所有线程共享的内存区域，主要存储对象的实例。</p><p>&nbsp; &nbsp; &nbsp; &nbsp;当堆中没有内存完成实例分配，并且堆无法扩展的时候，将会抛出OutOfMemoryError异常；当前虚拟机都是可以扩展的；</p><p>&nbsp; &nbsp;5.方法区，这个也是线程共享的内存区域，存储被虚拟机加载的类信息、常量、静态变量、即时编译的代码数据等；</p><p>&nbsp; &nbsp; &nbsp; \r\n方法区在物理上也是不需要连续的，可以选择固定大小或者扩展的大小，还可以选择不实现垃圾收集，方法区的垃圾回收是比较少的，这就是方法区为什么被称为永久区的原因，但是方法区也是可以执行回收的，该区域主要是针对常量池和类型的卸载；在方法区也规定当方法区无法满足内存分布的时候，将会抛出OutOfMemoryError异常；</p><p>&nbsp; &nbsp; &nbsp; 运行时常量是方法区的一部分，常量池主要用于存放编译生成的各种字面量和符合引用，由于常量池属于方法区的一部分，所以当常量池没有内存空间的时候就抛出OutOfMemoryError异常；</p><p>&nbsp; &nbsp;6.直接内存，不是虚拟机运行时的一部分，可以直接访问堆外的内存；所以当内存空间无法动态扩展的时候就会出现OutOfMemoryError异常；</p><p>&nbsp; &nbsp;以上基本是JVM内存分布的内容，简单的理解水满则溢出就是这个道理，系统的整个空间是一个大的容器，分不同的部分或者桶去分担整个容量，当那个桶不够的时候自然会溢出。明白内存区域的分布我们看下对象是如何分配在内存空间里面的?</p><p>&nbsp; Java对象这里指的是引用类型的对象，这里用Student stu=new Student()为例子访问，Student \r\nstu作为引用对象，存在与Java虚拟机栈上，new \r\nStudent()保存在Java堆中，堆中记录Student类型的信息包括方法，接口，对象类型等地址，这些类型的执行的数据存储在方法区中；</p><p>&nbsp; 这里需要说明一下对象访问的方式，主要包括2种句柄访问和直接指针访问：</p><p>&nbsp;1. 句柄访问主要是Java堆中划分一块句柄池，虚拟机栈中存放句柄池中的地址，句柄池中包括对象的实例数据和对象类型的数据的地址，基本分布如下图：</p><p>&nbsp;&nbsp;<img src=\"https://images2017.cnblogs.com/blog/1005447/201712/1005447-20171210174358896-1053299986.png\" alt=\"\" width=\"567\" height=\"261\"/></p><p>&nbsp; &nbsp;2.直接指针访问，就是虚拟机栈直接指向Java堆中的对象类型指针和对象的实例数据，然后对象类型指针在指向方法区中对象类型的实例数据，分布如下图：</p><p><img src=\"https://images2017.cnblogs.com/blog/1005447/201712/1005447-20171210174840115-965968368.png\" alt=\"\" width=\"404\" height=\"268\"/></p><p>&nbsp;HotSpot就是第二种访问方式，优点在于访问速度快，省去一次指针开销时间，JVM内存分布基本介绍到这里，接下来说下如何保证正确回收？</p><p>&nbsp; 回收是已经没有用的对象，那怎么判断一个对象没用引用？这里需要简单介绍2种方法:引用计数法和可达性分析算法；</p><p>&nbsp; 这里简单说一下引用计数法：对象中添加一个引用计数器，每当有一个地方引用计数器就增加1，引用失效就减少1，计数器为0就不可用；缺点就在于无法处理对象直接相互引用的问题，因为相互引用以后无法使计数器为0，所以无法回收；</p><p>&nbsp; 可达性分析算法，也就是我们常说的GC Root,，当一个对象没有与任何引用链相连的时候，就可以对该对象进行回收，下面是Java中GC Root对象使用的几个地方：</p><p><img src=\"https://images2017.cnblogs.com/blog/1005447/201712/1005447-20171211090111865-202859505.png\" alt=\"\" width=\"679\" height=\"280\"/></p><p>&nbsp;</p><p>&nbsp;&nbsp;<img src=\"https://images2017.cnblogs.com/blog/1005447/201712/1005447-20171210180720333-213077891.png\" alt=\"\" width=\"240\" height=\"137\"/></p><p>&nbsp; &nbsp;以上对象简单就是分为可用和不可用这2种，现在Java对引用概念进行扩充：</p><p><img src=\"https://images2017.cnblogs.com/blog/1005447/201712/1005447-20171210181524411-887072476.png\" alt=\"\" width=\"918\" height=\"92\"/></p><p>&nbsp; 明白这些我们基本明白JVM如何正确回收，接下来就是JVM什么情况下触发GC以及GC触发的方式?</p><p>&nbsp; 第一个问题比较容易回答当然是当内存空间不足的时候就需要触发GC，GC回收的时候采用的是分代收集的算法，主要分为年轻代和老年代，接下来我们简单介绍一下这2种方式：</p><p>&nbsp; &nbsp;年轻代：当一个对象被创建的时候，内存分配首先分配在年轻代，大部分对象创建以后都不再使用，对象很快变得不可达，就是对象无用，由于垃圾是被年轻代清理掉的，所以被叫做Minor GC或者Young GC。</p><p>&nbsp; &nbsp;老年代:对象如果在年轻代存活了足够长的时间而没有被清理掉（即在几次Young \r\nGC后存活了下来），则会被复制到年老代，年老代的空间一般比年轻代大，能存放更多的对象，在年老代上发生的GC次数也比年轻代少。当年老代内存不足时，将执行Major\r\n GC，也叫 Full GC。</p><p>&nbsp; &nbsp;明白这2块主要存放什么东西以后接下来我们看下GC的整体结构，看一个对象如何被Kill掉的流程：</p><p>&nbsp; &nbsp;<img src=\"https://images2017.cnblogs.com/blog/1005447/201712/1005447-20171211093041709-704224704.png\" alt=\"\" width=\"468\" height=\"260\"/></p><p>&nbsp; &nbsp;1.当一个对象被创建的时候(new)首先会在年轻代的Eden区被创建，直到当GC的时候，根据可达性算法，看一个对象是否消亡，没有消亡的对象会被放入年轻带的Survivor区，消亡的直接被Minor GC Kill掉；</p><p>&nbsp; &nbsp;2.进入到Survivor区的对象也不是安全的，当下一次Minor GC来的时候还是会检查Enden和Survivor存放对象区域中对象是否存活，存活放入另外一块Survivor区域；</p><p>&nbsp; &nbsp;3.当2个Survivor区切换几次以后，会直接进入老年代，当然进入到老年代也不是安全的，当老年代内存空间不足的时候，会触发Major GC,已经消亡的依然还是被Kill掉；</p><p>&nbsp; &nbsp;推荐一个这个写的很逗可以看下：http://blog.csdn.net/sd4015700/article/details/50109939</p><p>&nbsp; &nbsp;接下来我们还需要说一下GC的算法：标记--清除，复制，标记--整理这3种算法；</p><p>&nbsp; &nbsp;<img src=\"https://images2017.cnblogs.com/blog/1005447/201712/1005447-20171211115314399-1879541403.png\" alt=\"\" width=\"936\" height=\"138\"/></p><p>&nbsp;</p><p>&nbsp; &nbsp;<img src=\"https://images2017.cnblogs.com/blog/1005447/201712/1005447-20171211115513399-1524900929.png\" alt=\"\" width=\"418\" height=\"284\"/></p><p><img src=\"https://images2017.cnblogs.com/blog/1005447/201712/1005447-20171211115651102-1409113153.png\" alt=\"\" width=\"391\" height=\"221\"/></p><p>&nbsp;</p><p>&nbsp;<img src=\"https://images2017.cnblogs.com/blog/1005447/201712/1005447-20171211115926368-1898036623.png\" alt=\"\" width=\"472\" height=\"251\"/></p><p>&nbsp; &nbsp;了解算法和GC内存分布以后我们接下来介绍垃圾回收器，这部分内容我不计划用文字去介绍，在第三个栏目我会将我对《深入理解Java虚拟机》这本书的思维导图，内容还不是很完善我正在整理中，但是有GC这部分内容包括各种参数配置，大家可以下载下来具体了解一下；</p><p><br/></p>', '学习', '0', null, '2018-08-18 21:35', '2018-08-23 23:30', '30', '1');
INSERT INTO `t_art` VALUES ('1071fbf8c445c444d83fa9a73417177a4', '我的生活', '/blog/images/zd01.jpg', '本文很长，记录了我博客建站初到现在的过程，还有我从毕业到现在的一个状态，感谢您的阅读！', '<p>本文很长，记录了我博客建站初到现在的过程，还有我从毕业到现在的一个状态，感谢您的阅读，如果你还是学生，也许你能从此文中，找到我们曾经相似的地方。如果你已经工作，有自己的博客，我想，你并没有忘记当初建立个人博客的初衷吧！我的个人博客已经建站有8年的时间了，对它的热爱，一直都是只增未减。回想大学读书的那几年，那会儿非常流行QQ空间，我们寝室的室友还经常邀约去学校的网吧做自己的空间。系里有个男生，空间做得非常漂亮，什么悬浮，开场动画，音乐播放器，我们女生羡慕得不得了。还邀约他跟我们一起去通宵弄空间，网上可以找到很多免费的flash资源，还有音乐，那也是第一次接触js，知道在浏览器输入一个地址，修改一下数据，就能调用一些背景出来。然后把自己QQ空间弄得漂漂亮亮的，经常邀约室友来互踩。我记得08年地震，第二天晚上，我们寝室的几个人还淡定的在寝室装扮空间呢！后来空间收费项目也多了，官方漏洞也修复了，加上临近毕业，又要忙着做毕业设计，就没再打理QQ空间。我知道现在的九零后，零零后，你们肯定没看过《一帘幽梦》，那会儿我也是疯狂追剧，喜欢上紫菱，喜欢上她的网站。想看看她的小世界，而我更想学着做一个她那样的网站。那会儿还天真的以为网上真的有她的网站，百度搜了好些天也没有。要毕业的时候，要交作业了，感觉自己什么都没学会。室友拉着我们去看了她同学做的网站，我们一个个佩服得五体投地，甚至觉得太不可思议了。有难度，又怕自己不会。老师教我们怎么布局，怎么做，并没有教我们右键保存网页。不知道是谁先会了这绝技，然后我们一个个又跟打了鸡血似的，疯狂在网上找网页，右键另存为。然后一个个修改文字，图片。仿佛又回到了那会儿做QQ空间那个时候。拿着copy来，并且精心修改的作品，递交了毕业设计，顺利结业。那会儿还是很蒙，一种云里雾里的感觉，竟有种不知道自己到底是会还是不会的感觉，也就是大家常说的毕业迷茫期。工作后进入社会，出去谈业务，遇到一个对网页设计超级感兴趣的人，聊了一下午都还不够，他是完全自学的，做了一个首页宣传他们的产品。他眼里的我就是专业的，总是请教我一些问题。其实我内心特羡慕人家，每次问我，我也似懂非懂的跟人家解决问题，但我还是经常靠百度来搜索他要的答案。他身上那种好学好问的那股劲儿，也成为我迫切想拥有自己的个人博客的一个重要原因。做博客不是说做就做的，很多东西我都不懂，也不知道要购买域名还有空间。前期要做的工作还是很多。幸好张园同学，也是我实习期的同事，他会这些，教我网上找免费的虚拟空间，然后就是把自己做的页面上传进去，还给了有一个地址，然后就能访问了。那是第一次接触，也了解了整个网站的制作过程，只可惜买域名还有空间需要费用，还在实习期的我，想想也就算了。虚拟空间毕竟是免费的，没多长时间，做过的网页就不能访问了，又得重新注册，重新上传。等自己有一些资金和技术后，我开始买域名和空间。从一开始，我就没想过只是练练手，或者用一段时间就行了。我会一直用下去，所以精心挑选了域名和空间。这些年除了域名没有更换外，后台程序由asp换成了php，空间从西部数据换成万网，也就是现在的阿里云。一步步升级，就想把最好的一面呈现给大家。很多人问我网站速度怎么访问那么快，其实一是网站程序，页面最好是静态页面。每次我写的代码的时候，我都在琢磨怎么减少代码，减少使用div和图片，让html结构简单化，而又不失美观。所以，网站也改版了有好几次。二是空间还有带宽。这个其实很重要，现在备案跟以前比，快很多了，快的话一星期，慢的话顶多二十天。所以，不是因为特着急的话，还是用国内空间。关于国外空间，其实现在阿里云的香港虚拟主机也不错，访问还是上传都比以前好很多了。用它的小伙伴也挺多。延伸阅读 《我的个人博客之――阿里云空间选择》个人博客，用来做什么？我刚开始就把它当做一个我吐槽心情的地方，也就相当于一个网络记事本，写上一些关于自己生活工作中的小情小事，也会放上一些照片，音乐。每天工作回家后就能访问自己的网站，一边听着音乐，一边写写文章。虽然访问人数少，我也不在乎这些，个人博客就好像我自己的一个日记本，来窥探的人多了，反而不自在了。因为博客，我还是交了不少朋友。我网站之前的logo就是网友给我设计的。后来，也是因为同学说百度搜不着我的个人博客，我才开始琢磨怎么把自己的博客排名提上去，放上去一些自己做过的模板，提供免费下载。页面以前也只有一个首页，当初我就是想着设计一个首页就行了，真正想学的人，一个页面足够了，其他页面，都靠自己设计。现在不同啦，近期版本我提供的模板都很全，实在是架不住人多都来问我怎么只有一个页面，虽然我已经在下载说明里面说得很清楚了。也就是提供了这样一些资源，我的个人博客也不再是一个只关乎自己的一个平台。曝光率越来越高，光天化日之下，哪敢放自己照片，写自己心情啊，于是乎，继续这样的模式吧，把自己写的模板放到网站上去。乐于分享，是能结交到很多朋友的。我的个人博客，在今年三月份之前是没有提供后台安装，调试这些服务的。其实一直都有人找我做个人博客，因为调试时间还有修改的问题，从上传到安装到修改调试，一般要四五个小时，我怕收费高，所以一直都是拒绝的。自从推出来《心蓝时间轴》后，主动找我做网站的也多了，他们都说是我粉丝，喜欢我的模板，所以我在模板下面写了付费说明，我的个人博客也开始有了付费项目。我接到的第一单，是一位父亲，想给自家的宝贝建立一个博客。他说他想买一个域名，谈了好几天，最终花了8000多购买到，我挺敬佩他的，对孩子的爱，毫不吝啬。域名固然重要，其实我想说坚持用博客来记录宝贝成长点滴，才是最有价值的。第二单是一个阅读网站，从加他到跟他聊，看他朋友圈，很有才气的一个人，也相当有爱心，他的网站大部分是分享给一些爱好阅读的长者。还有些就是技术类的站长，做资讯，做旅游，做推广的。通常，从选的模板就能看出来网站类型。《心蓝时间轴》偏个人，《绅士》，《格调》偏技术，资讯。《清雅》，《水墨古典》偏文艺。但也有对我防备心的，比如说付款方式，能不能走淘宝，这些我也能理解，但是有些吧，从一开始聊，感觉就不太好，理应就认为不应该收钱，收钱干嘛，到处都是免费的，听到这些，我也慢慢解释。其实他们并不了解我，了解我的网站，只要是从我博客来的，关注过一段时间的，都知道青姐的人品是咋样的。用“心塞”这个词，毫不为过吧。我做过的网站，每过一段时间，我都会一个个点击看看进展怎么样，个人博客，不像真实的面对面聊，更多的是文字的交流，不得不说有时候文字传达的信息更能了解一个人，甚至有心灵共鸣。我想我还会再重新做一个仅仅属于自己的个人博客，如果你也想要做一个博客，用来记录自己的家庭，工作，生活，或者讨女友欢心，不妨现在就开始吧！</p>', '学习', '0', null, '2018-08-18 12:35', '2018-08-23 23:30', '12', '1');
INSERT INTO `t_art` VALUES ('13ac7ca7c1fa460981a83c9536eff436', '方式符是范德萨发2222', '/blog/images/zd02.jpg', '法国恢复供货', '<p>焚膏继晷<br/></p>', '学习', '0', null, '2018-08-23 20:45', null, '0', '1');
INSERT INTO `t_art` VALUES ('14968aed56c040879749ca8ac5e44c76', '湿湿的个盹符是范德萨发2222', '/blog/images/zd02.jpg', '法国恢复供货', '<p>焚膏继晷<br/></p>', '学习', '0', null, '2018-08-23 20:46', null, '9', '1');
INSERT INTO `t_art` VALUES ('20205722332c4500b0e198295cfbdde1', '大概的非官方个', '/blog/images/zd03.jpg', '多个地方恢复规划', '<p>的复合肥的更好发挥<br/></p>', '学习', '0', null, '2018-08-22 22:30', null, '0', '1');
INSERT INTO `t_art` VALUES ('2071fbf8c445c444d83fa9a73417177a4', 'dubbo 负载均衡策略', '/blog/images/zd03.jpg', '本篇详细讲述dubbo的负载均衡策略。', '<h2 style=\"color:rgb(85,85,85);\">dubbo主要核心部件</h2><p style=\"color:rgb(85,85,85);\">Remoting：网络通信框架，实现了sync-over-async和request-response消息机制。</p><p style=\"color:rgb(85,85,85);\">RPC：一个远程过程调用的抽象，支持负载均衡、容灾和集群功能。</p><p style=\"color:rgb(85,85,85);\">Registry：服务目录框架用于服务的注册和服务事件发布和订阅。（类似第一篇文章中的点菜宝）</p><p><span style=\"font-size:12px;\"><span style=\"color:#0c89cf;\">d</span><span style=\"color:#555555;\">ubbo架构</span></span></p><p style=\"color:rgb(85,85,85);\"><img src=\"https://img-blog.csdn.net/20150906112216852\" alt=\"\"/><br/></p><p style=\"color:rgb(85,85,85);\">Provider：&nbsp;暴露服务的提供方。</p><p style=\"color:rgb(85,85,85);\">Consumer：调用远程服务的服务消费方。</p><p style=\"color:rgb(85,85,85);\">Registry：&nbsp;服务注册中心和发现中心。</p><p style=\"color:rgb(85,85,85);\">Monitor：&nbsp;统计服务和调用次数，调用时间监控中心。（dubbo的控制台页面中可以显示）</p><p style=\"color:rgb(85,85,85);\">Container：服务运行的容器。</p><p style=\"color:rgb(85,85,85);\">&nbsp;<span style=\"font-size:12px;\">调用关系：</span></p><p style=\"color:rgb(85,85,85);\">&nbsp; &nbsp; &nbsp; &nbsp;0、服务器负责启动，加载，运行提供者（例如在tomcat容器中，启动dubbo服务端）。</p><p style=\"color:rgb(85,85,85);\">&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;1、提供者在启动时，向注册中心注册自己提供的服务。</p><p style=\"color:rgb(85,85,85);\">&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;2、消费者启动时，向注册中心订阅自己所需的服务。</p><p style=\"color:rgb(85,85,85);\">&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;3、注册中心返回提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。</p><p style=\"color:rgb(85,85,85);\">&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;4、消费者，从远程接口列表中，调用远程接口，dubbo会基于负载均衡算法，选一台提供者进行调用，如果调用失败则选择另一台。</p><p style=\"color:rgb(85,85,85);\">&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;5、消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。（可以在dubbo的可视化界面看到）</p><p><strong><span style=\"color:#555555;\">dubbo</span><span style=\"color:#555555;\">的容错方案</span></strong></p><p>当我们的系统中用到Dubbo的集群环境,因为各种原因在集群调用失败时，Dubbo提供了多种容错方案，缺省为failover重试。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dubbo的集群容错在这里想说说他是因为我们实际的项目中出现了此类的问题,因为依赖的第三方项目出现异常,导致dubbo调用超时,此时使用的是默认的集群容错方式,而配置的reties=&#39;3&#39;,这样前段系统连续掉用了三次服务,结果可想而知.</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>先说一下各节点关系：</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里的Invoker是Provider的一个可调用Service的抽象，Invoker封装了Provider地址及Service接口信息。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Directory代表多个Invoker，可以把它看成List&lt;Invoker&gt;，但与List不同的是，它的值可能是动态变化的，比如注册中心推送变更。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Cluster将Directory中的多个Invoker伪装成一个Invoker，对上层透明，伪装过程包含了容错逻辑，调用失败后，重试另一个。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Router负责从多个Invoker中按路由规则选出子集，比如读写分离，应用隔离等。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LoadBalance负责从多个Invoker中选出具体的一个用于本次调用，选的过程包含了负载均衡算法，调用失败后，需要重选。</p><p><span style=\"color:#555555;\">&nbsp;<strong>&nbsp;</strong></span><strong>集群容错模式：</strong></p><p><span style=\"color:#555555;\">&nbsp;&nbsp;Failover Cluster</span></p><p><span style=\"color:#555555;\">失败自动切换，当出现失败，重试其它服务器。</span><span style=\"color:#555555;\">(</span><span style=\"color:#555555;\">缺省</span><span style=\"color:#555555;\">)</span></p><p><span style=\"color:#555555;\">通常用于读操作，但重试会带来更长延迟。</span></p><p>可通过retries=&quot;2&quot;来设置重试次数(不含第一次)。正是文章刚开始说的那种情况.</p><p><span style=\"color:#555555;\">&nbsp; Failfast Cluster</span></p><p><span style=\"color:#555555;\">快速失败，只发起一次调用，失败立即报错。</span></p><p><span style=\"color:#555555;\">通常用于非幂等性的写操作，比如新增记录。</span></p><p><span style=\"color:#555555;\">&nbsp; Failsafe Cluster</span></p><p><span style=\"color:#555555;\">失败安全，出现异常时，直接忽略。</span></p><p><span style=\"color:#555555;\">通常用于写入审计日志等操作。</span></p><p><span style=\"color:#555555;\">&nbsp; Failback Cluster</span></p><p><span style=\"color:#555555;\">失败自动恢复，后台记录失败请求，定时重发。</span></p><p><span style=\"color:#555555;\">通常用于消息通知操作。</span></p><p><span style=\"color:#555555;\">&nbsp; Forking Cluster</span></p><p><span style=\"color:#555555;\">并行调用多个服务器，只要一个成功即返回。</span></p><p><span style=\"color:#555555;\">通常用于实时性要求较高的读操作，但需要浪费更多服务资源。</span></p><p><span style=\"color:#555555;\">可通过</span><span style=\"color:#555555;\">forks=&quot;2&quot;</span><span style=\"color:#555555;\">来设置最大并行数。</span></p><p><span style=\"color:#555555;\">&nbsp; Broadcast Cluster</span></p><p><span style=\"color:#555555;\">广播调用所有提供者，逐个调用，任意一台报错则报错。</span><span style=\"color:#555555;\">(2.1.0</span><span style=\"color:#555555;\">开始支持</span><span style=\"color:#555555;\">)</span></p><p><span style=\"color:#555555;\">通常用于通知所有提供者更新缓存或日志等本地资源信息。</span></p><p><span style=\"color:#555555;\">重试次数配置如：</span><span style=\"color:#555555;\">(failover</span><span style=\"color:#555555;\">集群模式生效</span><span style=\"color:#555555;\">)</span></p><p><span style=\"color:#555555;\">&lt;dubbo:serviceretries=&quot;2&quot;/&gt;</span></p><p><span style=\"color:#555555;\">或：</span><span style=\"color:#555555;\">&lt;dubbo:referenceretries=&quot;2&quot;/&gt;</span></p><p><span style=\"color:#555555;\">或：</span><span style=\"color:#555555;\">&lt;dubbo:reference&gt;</span></p><p><span style=\"color:#555555;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&lt;dubbo:methodname=&quot;findFoo&quot;retries=&quot;2&quot;/&gt;</span></p><p><span style=\"color:#555555;\">&nbsp;&nbsp;&nbsp;&nbsp; &lt;/dubbo:reference&gt;</span></p><p><strong>集群模式配置如：</strong></p><p><span style=\"color:#555555;\">&lt;dubbo:servicecluster=&quot;failsafe&quot;/&gt;</span></p><p><span style=\"color:#555555;\">或：</span><span style=\"color:#555555;\">&lt;dubbo:referencecluster=&quot;failsafe&quot;/&gt;</span></p><p><strong><span style=\"color:#555555;\">dubbo</span><span style=\"color:#555555;\">负载均衡策略：</span></strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在集群负载均衡时，Dubbo提供了多种均衡策略，缺省为random随机调用。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<strong>RandomLoadBalance</strong></p><p><span style=\"color:#555555;\">随机，按权重设置随机概率。</span></p><p><span style=\"color:#555555;\">在一个截面上碰撞的概率高，但调用量越大分布越均匀，而且按概率使用权重后也比较均匀，有利于动态调整提供者权重。</span></p><p>&nbsp;&nbsp;&nbsp;&nbsp;<strong>RoundRobin LoadBalance</strong></p><p><span style=\"color:#555555;\">轮循，按公约后的权重设置轮循比率。</span></p><p><span style=\"color:#555555;\">存在慢的提供者累积请求问题，比如：第二台机器很慢，但没挂，当请求调到第二台时就卡在那，久而久之，所有请求都卡在调到第二台上。</span></p><p>&nbsp;&nbsp;&nbsp;&nbsp;<strong>LeastActive LoadBalance</strong></p><p><span style=\"color:#555555;\">最少活跃调用数，相同活跃数的随机，活跃数指调用前后计数差。</span></p><p><span style=\"color:#555555;\">使慢的提供者收到更少请求，因为越慢的提供者的调用前后计数差会越大。</span></p><p>&nbsp;&nbsp;&nbsp;<strong>ConsistentHashLoadBalance</strong></p><p><span style=\"color:#555555;\">一致性</span><span style=\"color:#555555;\">Hash</span><span style=\"color:#555555;\">，相同参数的请求总是发到同一提供者。</span></p><p><span style=\"color:#555555;\">当某一台提供者挂时，原本发往该提供者的请求，基于虚拟节点，平摊到其它提供者，不会引起剧烈变动。</span></p><p><br/></p>', '学习', '0', null, '2018-08-18 13:35', '2018-08-19 08:02', '15', '1');
INSERT INTO `t_art` VALUES ('3071fbf8c445c444d83fa9a73417177a4', 'Redis哨兵模式', '/blog/images/zd01.jpg', 'Redis-Sentinel redis的哨兵模式', '<h1>Redis-Sentinel redis的哨兵模式</h1><h2>Redis Sentinel 模式简介</h2><p>Redis-Sentinel是官方推荐的高可用解决方案，当redis在做master-slave的高可用方案时，假如master宕机了，redis本身（以及其很多客户端）都没有实现自动进行主备切换，而redis-sentinel本身也是独立运行的进程，可以部署在其他与redis集群可通讯的机器中监控redis集群。</p><h2>它的主要功能有一下几点</h2><p>1、不时地监控redis是否按照预期良好地运行;<br/>2、如果发现某个redis节点运行出现状况，能够通知另外一个进程(例如它的客户端);<br/>3、能够进行自动切换。当一个master节点不可用时，能够选举出master的多个slave(如果有超过一个slave的话)中的一个来作为新的master,其它的slave节点会将它所追随的master的地址改为被提升为master的slave的新地址。<br/>4、哨兵为客户端提供服务发现，客户端链接哨兵，哨兵提供当前master的地址然后提供服务，如果出现切换，也就是master挂了，哨兵会提供客户端一个新地址。</p><h2>哨兵（sentinel）本身也是支持集群的</h2><p>很显然，单个哨兵会存在自己挂掉而无法监控整个集群的问题，所以哨兵也是支持集群的，我们通常用三台哨兵机器来监控一组redis集群。</p><p>&nbsp;</p><h2>&nbsp;快速开始！</h2><p><strong>环境准备：</strong><br/>centos7服务器3台,6也可以，没什么区别。<br/>我部署好了三台<br/>redis-1<br/>redis-2<br/>redis-3<br/>清空selinux与iptables</p><p><strong>&nbsp;编译安装redis</strong></p><p>&nbsp;</p><p><span class=\"cnblogs_code_copy\"><a title=\"复制代码\"><img src=\"https://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"/></a></span></p><pre>yum&nbsp;install&nbsp;gcc*&nbsp;tcl&nbsp;-ymkdir&nbsp;/opt/soft\r\ncd&nbsp;/opt/softwget&nbsp;http://download.redis.io/releases/redis-3.2.4.tar.gztar&nbsp;xf&nbsp;redis-3.2.4.tar.gz\r\ncd&nbsp;redis-3.2.4makemkdir&nbsp;confmkdir&nbsp;bincp&nbsp;utils/redis_init_script&nbsp;bin/rediscp&nbsp;redis.conf&nbsp;conf/6379.conf\r\ncd&nbsp;..mv&nbsp;redis-3.2.4&nbsp;/opt/redis\r\ncd&nbsp;/opt/redis/binsed&nbsp;-i&nbsp;s#CLIEXEC=\\/usr\\/local\\/bin\\/redis-cli#CLIEXEC=\\/opt\\/redis\\/src\\/redis-cli#g&nbsp;redissed&nbsp;-i&nbsp;s#EXEC=\\/usr\\/local\\/bin\\/redis-server#EXEC=\\/opt\\/redis\\/src\\/redis-server#g&nbsp;redissed&nbsp;-i&nbsp;s#CONF=\\&quot;\\/etc\\/redis#CONF=\\&quot;\\/opt\\/redis\\/conf#g&nbsp;rediscd&nbsp;/opt/redis/confsed&nbsp;-i&nbsp;s#daemonize\\&nbsp;no#daemonize\\&nbsp;yes#g&nbsp;6379.conf</pre><p><span class=\"cnblogs_code_copy\"><a title=\"复制代码\"><img src=\"https://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"/></a></span></p><p>&nbsp;</p><p><strong>安装完毕后，修改配置文件。</strong></p><p>vim /opt/redis/conf/6379.conf<br/>注释此条<br/>bind 127.0.0.1<br/>protected-mode yes 改为 protected-mode no #关闭安全模式<br/>至此，redis部署完毕。</p><p><br/>redis的启动停止脚本在<br/>/opt/redis/bin/redis &nbsp; stop/start<br/>redis的配置文件在<br/>/opt/redis/conf/6379.conf<br/>redis的登陆命令在<br/>/opt/redis/src/redis-cli</p><p>&nbsp;</p><p><strong>redis配置主从</strong></p><p>启动两台redis<br/>redis-1	10.0.0.10<br/>redis-2 10.0.0.20</p><p>若redis-1为主的话，在redis-2的配置文件中配置<br/>slaveof 10.0.0.10 6379<br/>修改完毕后重启redis即可，重启后我们可通过登陆进入redis后info查看主从信息。</p><p>&nbsp;</p><p><strong>引入哨兵。<br/></strong></p><p>redis-1与redis-2搭建完毕主从后，我们开始引入哨兵。<br/>哨兵是一个单独的程序，所以我们需要单独部署它。<br/>若是在其他机器上部署哨兵，那么请用上面的redis安装脚本重新安装一遍redis。<br/>在这里我已经部署完毕了<br/>redis-1<br/>redis-2<br/>redis-3</p><p><strong>增加哨兵的配置文件。三台redis都需要增加，文件内容这三台一样。</strong></p><p><span class=\"cnblogs_code_copy\"><a title=\"复制代码\"><img src=\"https://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"/></a></span></p><pre>vim&nbsp;/opt/redis/conf/&nbsp;&nbsp;.&nbsp;,its&nbsp;slave&nbsp;is&nbsp;..&nbsp;&nbsp;-after-milliseconds&nbsp;master1&nbsp;-timeout&nbsp;master1&nbsp;-syncs&nbsp;master1&nbsp;sentinel&nbsp;auth-pass&nbsp;mymaster&nbsp;123456　　#如果你的redis集群有密码</pre><p><span class=\"cnblogs_code_copy\"><a title=\"复制代码\"><img src=\"https://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"/></a></span></p><p>&nbsp;</p><p>配置文件的含义请自行百度。</p><p><strong>启动哨兵</strong><br/>三台机器都是一个操作方式。</p><p><br/>添加窗口<br/>screen -S sentinel</p><p><br/>在新窗口启动哨兵<br/>/opt/redis/src/redis-sentinel /opt/redis/conf/sentinel.conf --protected-mode no<br/>启动后即可看到前台输出信息。</p><p><br/>后台挂起这个窗口请按：<br/>Ctrl+a+d</p><p><br/>下次返回观看这个窗口请输入<br/>screen -r sentinel</p><p><br/>我们这里暂时不挂起窗口，可以观察哨兵监控集群的状态。</p><p>我们接下来我们进行切换以及增加新的salve节点测试。<br/>关掉redis-1并查看哨兵监控的状态，约30秒内，哨兵探测redis-1客观故障后，即会重新选举新的master，重新选举完毕后我们在redis-2中info查看主从状态，会发现redis-2已经被选举为master。<br/>重新启动redis-1，并不需要修改配置文件，启动后redis-1自动会与redis-2进行同步。</p><p>修改redis-3的配置文件，把slaveof指向到redis-2，启动后你会发现哨兵会把redis-3自动添加到集群中。</p><p><br/></p>', '学习', '0', null, '2018-08-18 15:35', '2018-08-19 13:37', '3', '1');
INSERT INTO `t_art` VALUES ('4071fbf8c445c444d83fa9a73417177a4', '高可用 RabbitMQ 集群自动化部署解决方案', '/blog/images/zd02.jpg', '本篇详细讲述高可用 RabbitMQ 集群自动化部署解决方案。', '<h2 class=\"ibm-h2\">简述</h2><p><em>RabbitMQ</em>是流行的开源消息队列系统，本身已经具备了较强的并发处理速度及运行稳定性，然而在大规模的实际应用中，往往还需要使用集群配置来保证系统中消息通信部分的高可用性，并发处理性能及异常恢复能力。这里将介绍一种实用的消息集群架构，以及一种能够快速、高效、可靠地部署并配置消息集群的方式，通过这种方法，我们可以在系统部署时仅需短短几分钟就能完成规模化的消息集群架设，极大地提高了工作效率和部署成功率。</p><h2 class=\"ibm-h2\">集群结构设计</h2><p>RabbitMQ 已经支持与 Erlang 集成的 active/active cluster\r\n &nbsp; &nbsp; &nbsp; &nbsp;方案，但是为了实现集群的高可用及自动化管理，我们还需要一个集群管理工具，来负责监控各节点消息服务的运行状态，以及在发现异常时自动执行一些预订的恢复动作，从而增强集群的容错恢复能力和持续服务能力。我们这里选择的是\r\n &nbsp; &nbsp; &nbsp; &nbsp;Pacemaker 加 RabbitMQ 的集成方式。</p><p>集群结构如下图所示，RabbitMQ clustering 部分提供消息集群内部心跳检查及数据管理和同步功能，Pacemaker 则负责监控 RabbitMQ\r\n &nbsp; &nbsp; &nbsp; &nbsp;各节点的服务状态及异常恢复，保证集群正常运行。</p><h5 class=\"ibm-h5\">图 1.RabbitMQ 集群结构</h5><p><img src=\"https://www.ibm.com/developerworks/cn/opensource/os-cn-RabbitMQ/img001.jpg\" class=\"ibm-downsize\" alt=\"图 1.RabbitMQ 集群结构\" width=\"464\" height=\"198\"/></p><h2 class=\"ibm-h2\">部署准备工作</h2><p>准备工作主要分为如下几个步骤：</p><ol class=\" list-paddingleft-2\"><li><p>配置系统软件源，需要包括 Erlang，RabbitMQ，Pacemaker 及相关的依赖包。<br/>\r\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;本文采用的各主要软件及版本包括：rhel6.5，rabbitmq3.4.4，erlang17.0，pacemaker1.1.12，corosync2.3.4，可以根据实际情况增减所需依赖。</p></li><li><p>这里使用 Chef 实现自动化安装，需要一台配置好的 Chef Server，详细介绍请参考 <a href=\"http://docs.chef.io/server/install_server.html\">C</a><a href=\"http://docs.chef.io/server/install_server.html\">hef </a><a href=\"http://docs.chef.io/server/install_server.html\">S</a><a href=\"http://docs.chef.io/server/install_server.html\">erver</a><a href=\"http://docs.chef.io/server/install_server.html\">安装配置</a>。</p></li><li><p>下载需要的社区 Cookbook：</p></li></ol><p><a href=\"https://supermarket.chef.io/cookbooks/rabbitmq/download\"><strong>RabbitMQ</strong></a><a href=\"https://supermarket.chef.io/cookbooks/rabbitmq/download\"><strong>\r\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Cookbook</strong></a><a href=\"https://supermarket.chef.io/cookbooks/rabbitmq/download\"><strong>下载</strong></a></p><p><a href=\"https://github.com/stackforge/cookbook-pacemaker/archive/master.zip\"><strong>Pacemaker</strong></a><a href=\"https://github.com/stackforge/cookbook-pacemaker/archive/master.zip\"><strong>\r\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Cookbook</strong></a><a href=\"https://github.com/stackforge/cookbook-pacemaker/archive/master.zip\"><strong>下载</strong></a></p><p><a href=\"https://supermarket.chef.io/cookbooks/erlang/download\"><strong>Erlang Cookbook\r\n &nbsp; &nbsp; &nbsp; &nbsp;下载</strong></a></p><p>如果你的软件源里已经包含了 Erlang 相关 package，可以不用下载 Erlang Cookbook，只需修改<strong>RabbitMQ</strong>里的\r\n &nbsp; &nbsp; &nbsp; &nbsp;Erlang 安装方式为本地安装就可以，本文采用本地安装方式，需要修改 RabbitMQ Cookbook 中以下文件：</p><ul class=\"ibm-bullet-list list-paddingleft-2\"><li><p>修改 metadata.rb，去除 RabbitMQ Cookbook 的 Erlang 依赖</p></li></ul><p><span class=\"dw-code-nohighlight\"><table><tbody><tr class=\"firstRow\"><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">#depends &#39;erlang&#39;</code></div></td></tr></tbody></table></span></p><ul class=\"ibm-bullet-list list-paddingleft-2\"><li><p>修改 recipe/default.rb 为本地安装</p></li></ul><p><span class=\"dw-code-nohighlight\"><table><tbody><tr class=\"firstRow\"><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div></td><td class=\"code\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">#include_recipe &#39;erlang&#39;</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">package &#39;erlang&#39;</code></div></td></tr></tbody></table></span></p><p>如果系统启用了 iptables，还需要下载使用 iptables Cookbook 来开放相应端口。</p><p><a href=\"https://supermarket.chef.io/cookbooks/iptables/download\">i</a><a href=\"https://supermarket.chef.io/cookbooks/iptables/download\">ptables</a><a href=\"https://supermarket.chef.io/cookbooks/iptables/download\"> Cookbook 下载</a>。</p><h2 class=\"ibm-h2\">自动安装流程</h2><p>为实现本文使用的消息集群结构，需要在所有消息节点上分别搭建<strong>RabbitMQ</strong>的集群与 Pacemaker\r\n &nbsp; &nbsp; &nbsp; &nbsp;的集群，设计完成的自动脚本安装配置过程如下：</p><ol class=\" list-paddingleft-2\"><li><p>添加所有节点的 ip hostname 映射至/etc/hosts，用作<strong>RabbitMQ</strong> cluster 之间通信</p></li><li><p>安装<strong>RabbitMQ</strong>，设置统一的 erlang cookie，通过配置文件 (/etc/rabbitmq/rabbitmq.config)\r\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;来创建 cluster，并开放相应端口</p></li><ul class=\"ibm-bullet-list list-paddingleft-2\"><li><p>4369 (epmd), 25672 (Erlang distribution)</p></li><li><p>5672, 5671 (AMQP 0-9-1 without and with TLS)</p></li><li><p>15672 (if management plugin is enabled)</p></li><li><p>61613, 61614 (if STOMP is enabled)</p></li><li><p>1883, 8883 (if MQTT is enabled)</p></li></ul><li><p>安装 Pacemaker，并开放相应端口</p></li><ul class=\"ibm-bullet-list list-paddingleft-2\"><li><p>5405 (corosync)</p></li></ul><li><p>创建新的<strong>RabbitMQ</strong>账户供用户使用。从 rabbitmq3.3.0 版本开始，guest\r\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;账户默认不支持远程访问，需另建带相应权限的远程访问帐号。</p></li><li><p>创建 pacemaker rabbitmq resource，并 clone 至所有节点。</p></li></ol><p><em>注意：上述 1</em><em>、</em><em>2</em><em>、</em><em>3 步骤需要在所有节点执行，4</em><em>、</em><em>5\r\n &nbsp; &nbsp; &nbsp; &nbsp;步只需在任一台 cluster 节点上执行一次就可以对整个集群生效。</em></p><h2 class=\"ibm-h2\">详细实现</h2><p>将所有下载的 Cookbook 放至相同目录下，按以下步骤创建并修改新的 rabbitmq-ha cookbook，实现自动安装流程：</p><ol class=\" list-paddingleft-2\"><li><p>在 Chef Server 上使用 knife 命令创建 rabbitmq-ha cookbook &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class=\"dw-code-nohighlight\"></span></p><table><tbody><tr class=\"firstRow\"><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">knife cookbook create rabbitmq-ha</code></div></td></tr></tbody></table><p></p></li><li><p>进入创建的 rabbitmq-ha cookbook 目录，修改文件 metadata.rb，增加以下 Cookbook 依赖 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class=\"dw-code-nohighlight\"></span></p><table><tbody><tr class=\"firstRow\"><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div></td><td class=\"code\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">depends iptables</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">depends rabbitmq</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript plain\">depends pacemaker</code></div></td></tr></tbody></table><p></p></li><li><p>在 rabbitmq-ha cookbook 中添加 iptables 端口模板文件 templates/default/port.erb &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class=\"dw-code-nohighlight\"></span></p><table><tbody><tr class=\"firstRow\"><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div></td><td class=\"code\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">-A FWR -p tcp --dports 5672 -j ACCEPT</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">-A FWR -p tcp --dports 4369 -j ACCEPT</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript plain\">-A FWR -p tcp --dports 25672 -j ACCEPT</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript plain\">-A FWR -p udp --dports 5405 -j ACCEPT</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript plain\">-A FWR -p udp --sports 5405 -j ACCEPT</code></div></td></tr></tbody></table><p></p></li><li><p>添加安装脚本 recipe/ha-install.rb &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class=\"dw-code-nohighlight\"></span></p><table><tbody><tr class=\"firstRow\"><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div></td><td class=\"code\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\"># 注册端口</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">iptables_rule &#39;port&#39;</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript plain\"># 添加 ip hostname 映射</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript plain\">execute &#39;add qpd hostnames to /etc/hosts&#39; do</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript plain\">command &lt;&lt;-EOF</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;</code><code class=\"htmlscript plain\">echo &quot;# Hosts of rabbitmq nodes&quot; &gt;&gt; /etc/hosts</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">echo &quot;192.168.1.10 rab001&quot; &gt;&gt; /etc/hosts</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">echo &quot;192.168.1.11 rab002&quot; &gt;&gt; /etc/hosts</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">EOF</code></div><div class=\"line number10 index9 alt1\"><code class=\"htmlscript plain\">end</code></div><div class=\"line number11 index10 alt2\"><code class=\"htmlscript plain\"># 安装 rabbitmq</code></div><div class=\"line number12 index11 alt1\"><code class=\"htmlscript plain\">include_recipe &#39;rabbitmq&#39;</code></div><div class=\"line number13 index12 alt2\"><code class=\"htmlscript plain\"># 安装 pacemaker</code></div><div class=\"line number14 index13 alt1\"><code class=\"htmlscript plain\">include_recipe &#39;pacemaker&#39;</code></div></td></tr></tbody></table><p></p></li><li><p>添加集群配置脚本 recipe/ha-setup.rb &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class=\"dw-code-nohighlight\"></span></p><table><tbody><tr class=\"firstRow\"><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div></td><td class=\"code\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\"># 创建 rabbitmq 用户</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">rabbitmq_user &#39;rabbituser&#39; do</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">password &#39;password&#39;</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">action :add</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript plain\">end</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript plain\"># 设置权限</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript plain\">rabbitmq_user &#39;rabbituser&#39; do</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">vhost &#39;/&#39;</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">permissions &#39;.* .* .*&#39;</code></div><div class=\"line number10 index9 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">action :set_permissions</code></div><div class=\"line number11 index10 alt2\"><code class=\"htmlscript plain\">end</code></div><div class=\"line number12 index11 alt1\"><code class=\"htmlscript plain\"># 创建 clone 资源</code></div><div class=\"line number13 index12 alt2\"><code class=\"htmlscript plain\">pacemaker_clone &#39;rabbitmq&#39; do</code></div><div class=\"line number14 index13 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">name &quot;RABBITMQ&quot;</code></div><div class=\"line number15 index14 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">agent &quot;ocf:rabbitmq:rabbitmq-server&quot;</code></div><div class=\"line number16 index15 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">params { &quot;nodename&quot; =&gt; &quot;rabbit@`hostname -s`&quot;, &quot;config_file&quot; =&gt; &quot;/etc/rabbitmq/rabbitmq&quot; }</code></div><div class=\"line number17 index16 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">op {&#39;monitor&#39; =&gt; { &#39;interval&#39; =&gt; &#39;10s&#39;, &#39;timeout&#39; =&gt; &#39;30s&#39; } }</code></div><div class=\"line number18 index17 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">action :create</code></div><div class=\"line number19 index18 alt2\"><code class=\"htmlscript plain\">end</code></div></td></tr></tbody></table><p></p></li><li><p>在 Cookbook 同级目录创建 environment\r\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;文件：rabbit-ha-env.json，并配置<strong>RabbitMQ</strong>相关参数 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class=\"dw-code-nohighlight\"></span></p><table><tbody><tr class=\"firstRow\"><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div></td><td class=\"code\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">{</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">&quot;name&quot;: &quot;rabbit-ha-env&quot;,</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">&quot;json_class&quot;: &quot;Chef::Environment&quot;,</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">&quot;chef_type&quot;: &quot;environment&quot;,</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">&quot;override_attributes&quot;: {</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">&quot;rabbitmq&quot;: {</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;</code><code class=\"htmlscript plain\">&quot;cluster&quot;: true,</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript spaces\">&nbsp;</code><code class=\"htmlscript plain\">&quot;cluster_disk_nodes&quot;: [&quot;rabbit@rab001&quot;, &quot;rabbit@rab002&quot;]</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript spaces\">&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number10 index9 alt1\"><code class=\"htmlscript spaces\">&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number11 index10 alt2\"><code class=\"htmlscript spaces\">&nbsp;</code><code class=\"htmlscript plain\">}</code></div></td></tr></tbody></table><p></p></li></ol><h2 class=\"ibm-h2\">安装</h2><p>安装步骤如下：</p><ol class=\" list-paddingleft-2\"><li><p>进入存放所有 Cookbook 的目录，上传所有 Cookbook 至 Chef Server &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class=\"dw-code-nohighlight\"></span></p><table><tbody><tr class=\"firstRow\"><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">knife cookbook upload -a -o .</code></div></td></tr></tbody></table><p></p><p>也可以分别单独上传。</p><p><span class=\"dw-code-nohighlight\"></span></p><table><tbody><tr class=\"firstRow\"><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">knife cookbook upload rabbitmq-ha -o .</code></div></td></tr></tbody></table><p></p></li><li><p>上传 environment 文件 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class=\"dw-code-nohighlight\"></span></p><table><tbody><tr class=\"firstRow\"><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">knife environment from file rabbit-ha-env.json</code></div></td></tr></tbody></table><p></p></li><li><p>顺序执行安装命令，等待前一个节点安装完成后再执行下个节点 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class=\"dw-code-nohighlight\"></span></p><table><tbody><tr class=\"firstRow\"><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div></td><td class=\"code\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">knife bootstrap 192.168.1.10 -x root -P ×××××× -r</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">&quot;recipe[rabbitmq-ha::ha-install]&quot; -E rabbit-ha-env</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript plain\">knife bootstrap 192.168.1.11 -x root -P ×××××× -r &quot;recipe[rabbitmq-ha::ha-install],</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">recipe[rabbitmq-ha::ha-setup]&quot; -E rabbit-ha-env</code></div></td></tr></tbody></table><p></p></li></ol><h2 class=\"ibm-h2\">验证</h2><p>安装成功后，SSH 登录任意一个 RabbitMQ 节点检查安装状态</p><ul class=\"ibm-bullet-list list-paddingleft-2\"><li><p>检查 RabbitMQ 集群状态，所有节点处于 running list 中：</p></li></ul><p><span class=\"dw-code-nohighlight\"><table><tbody><tr class=\"firstRow\"><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">rabbitmqctl cluster_status</code></div></td></tr></tbody></table></span></p><ul class=\"ibm-bullet-list list-paddingleft-2\"><li><p>检查 Pacemaker 集群状态，所有节点 online 并且 started</p></li></ul><p><span class=\"dw-code-nohighlight\"><table><tbody><tr class=\"firstRow\"><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">pcs status</code></div></td></tr></tbody></table></span></p><h2 class=\"ibm-h2\">集群管理</h2><p>配置完成后 Pacemaker 集群会自动对各节点 RabbitMQ 的服务运行状态进行监控管理，RabbitMQ 集群负责对外提供消息服务。以下是集群常用管理命令：</p><ol class=\" list-paddingleft-2\"><li><p>通过 Pacemaker 来管理各节点 RabbitMQ 服务运行状态<span class=\"dw-code-nohighlight\"></span></p><table><tbody><tr class=\"firstRow\"><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">crm_standby -U rab001 -v on</code></div></td></tr></tbody></table><span class=\"dw-code-nohighlight\"><table><tbody><tr class=\"firstRow\"><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">crm_standby -U rab001 -v off</code></div></td></tr></tbody></table></span><span class=\"dw-code-nohighlight\"><table><tbody><tr class=\"firstRow\"><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">service pacemaker restart</code></div></td></tr></tbody></table></span><p></p></li><ul class=\"ibm-bullet-list list-paddingleft-2\"><li><p>配置好 resource 后 Pacemaker 已经接管了 RabbitMQ 服务，启停 Pacemaker 服务同样会导致 RabbitMQ 服务的启动和停止</p></li></ul><ul class=\"ibm-bullet-list list-paddingleft-2\"><li><p>重新开启监控开启 Rabbit 服务：</p></li></ul><ul class=\"ibm-bullet-list list-paddingleft-2\"><li><p>停止监控节点并停止 Rabbit 服务：</p></li></ul><li><p>RabbitMQ 集群管理</p></li></ol><ul class=\"ibm-bullet-list list-paddingleft-2\"><li><p>查看用户列表</p></li></ul><p><span class=\"dw-code-nohighlight\"><table><tbody><tr class=\"firstRow\"><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">rabbitmqctl list_users</code></div></td></tr></tbody></table></span></p><ul class=\"ibm-bullet-list list-paddingleft-2\"><li><p>查看用户权限</p></li></ul><p><span class=\"dw-code-nohighlight\"><table><tbody><tr class=\"firstRow\"><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">rabbitmqctl list_user_permissions rabbituser</code></div></td></tr></tbody></table></span></p><ul class=\"ibm-bullet-list list-paddingleft-2\"><li><p>查看 HA 策略</p></li></ul><p><span class=\"dw-code-nohighlight\"><table><tbody><tr class=\"firstRow\"><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">rabbitmqctl list_policies</code></div></td></tr></tbody></table></span></p><h2 class=\"ibm-h2\">结束语</h2><p>在大规模的企业应用系统中，负责消息收发的模块往往承担着非常重要的中间角色和非常庞大的处理压力，所以在系统的设计阶段就必须对可能出现的业务瓶颈作出合理的预判，并采取相应的架构设计来适当应对。在所有系统的实际使用阶段，拥有快速可靠地部署稳定、可用、不间断服务的能力，以及适当的自我恢复，无疑是可以影响产品成功与否的关键性因素，所以必须审慎对待。</p><p><br/></p>', '学习', '0', null, '2018-08-18 14:35', '2018-08-19 13:38', '9', '1');
INSERT INTO `t_art` VALUES ('5071fbf8c445c444d83fa9a73417177a4', '缓存击穿、失效及热点key问题', '/blog/images/zd03.jpg', '本篇详细讲述缓存击穿、失效及热点key问题。', '<h1 class=\"article-title\">缓存击穿、失效及热点key问题</h1><p><a class=\"color3\" href=\"http://lehoon.com/categories/backend/\" target=\"_self\">后端</a></p><ul class=\"article-tag-list list-paddingleft-2\"><li class=\"article-tag-\"><p><a class=\"color1\" href=\"http://lehoon.com/tags/cache/\" target=\"_self\">cache</a></p></li><li class=\"article-tag-\"><p><a class=\"color4\" href=\"http://lehoon.com/tags/memcache/\" target=\"_self\">memcache</a></p></li><li class=\"article-tag-\"><p><a class=\"color1\" href=\"http://lehoon.com/tags/redis/\" target=\"_self\">redis</a></p></li></ul><p>分布式缓存是网站服务端经常用到的一种技术，在读多写少的业务场景中，通过使用缓存可以有效地支撑高并发的访问量，对后端的数据库等数据源做到很好地保护。现在市面上有很多分布式缓存，比如Redis、Memcached以及阿里的Tair等，不管我们使用的哪种缓存产品，基本上都会遇到缓存击穿、缓存失效以及热点key的问题。如何有效地防止这些问题，也是我们在享受缓存带来的红利地同时，必须要解决地难题。</p><p>通常我们在使用缓存时候都是先检查缓存中是否存在，如果存在直接返回缓存内容，如果不存在就直接查询数据库然后再缓存查询结果返回，例如下图所示，<br/><a class=\"fancy-ctn fancybox\" title=\"undefined\" href=\"http://o9m6mjdbx.bkt.clouddn.com/image/cache/616903-4f6c97a3c449734b.png\"><img title=\"undefined\" src=\"http://o9m6mjdbx.bkt.clouddn.com/image/cache/616903-4f6c97a3c449734b.png\" alt=\"\"/></a></p><h2>缓存击穿：</h2><h3>描述</h3><p>查询一个数据库中不存在的数据，比如商品详情，查询一个不存在的ID，每次都会访问DB，如果有人恶意破坏，很可能直接对DB造成过大地压力。</p><h3>解决方案：</h3><p>当通过某一个key去查询数据的时候，如果对应在数据库中的数据都不存在，我们将此key对应的value设置为一个默认的值，比如“NULL”，并设置一个缓存的失效时间，这时在缓存失效之前，所有通过此key的访问都被缓存挡住了。后面如果此key对应的数据在DB中存在时，缓存失效之后，通过此key再去访问数据，就能拿到新的value了。</p><h2>缓存失效：</h2><h3>描述</h3><p>在高并发的环境下，如果此时key对应的缓存失效，此时有多个进程就会去同时去查询DB，然后再去同时设置缓存。这个时候如果这个key是系统中的热点key或者同时失效的数量比较多时，DB访问量会瞬间增大，造成过大的压力。</p><h3>解决方案：</h3><p>将系统中key的缓存失效时间均匀地错开，防止统一时间点有大量的key对应的缓存失效；<br/>重新设计缓存的使用方式，当我们通过key去查询数据时，首先查询缓存，如果此时缓存中查询不到，就通过分布式锁进行加锁，取得锁的进程查DB并设置缓存，然后解锁；其他进程如果发现有锁就等待，然后等解锁后返回缓存数据或者再次查询DB。</p><h2>热点key：</h2><h3>描述</h3><p>缓存中的某些Key(可能对应用与某个促销商品)对应的value存储在集群中一台机器，使得所有流量涌向同一机器，成为系统的瓶颈，该问题的挑战在于它无法通过增加机器容量来解决。</p><h3>解决方案：</h3><p>客户端热点key缓存：将热点key对应value并缓存在客户端本地，并且设置一个失效时间。对于每次读请求，将首先检查key是否存在于本地缓存中，如果存在则直接返回，如果不存在再去访问分布式缓存的机器。<br/>将热点key分散为多个子key，然后存储到缓存集群的不同机器上，这些子key对应的value都和热点key是一样的。当通过热点key去查询数据时，通过某种hash算法随机选择一个子key，然后再去访问缓存机器，将热点分散到了多个子key上。</p><p><br/></p>', '学习', '0', null, '2018-08-18 18:35', '2018-08-19 13:38', '4', '1');
INSERT INTO `t_art` VALUES ('5630bcabacf8498684108214daac8f2e', '大哥大法官', '/blog/images/zd03.jpg', '的发挥发挥', '<p>电饭锅和高房价<br/></p>', '学习', '0', null, '2018-08-22 22:31', null, '0', '1');
INSERT INTO `t_art` VALUES ('567737fe3ef148879f3638556ddb7f8a', '付电话费的贵湿的个盹符是范德萨发2222', '/blog/images/zd02.jpg', '法国恢复供货', '<p>焚膏继晷<br/></p>', '学习', '0', null, '2018-08-23 20:46', null, '7', '1');
INSERT INTO `t_art` VALUES ('5ae2e678e2e146b3bf03d0896b7ef29c', '豆腐干豆腐花', '/blog/images/zd03.jpg', '梵蒂冈地方和', '<p>电饭锅东方红东方红<br/></p>', '学习', '0', null, '2018-08-22 22:31', null, '0', '1');
INSERT INTO `t_art` VALUES ('5d835ee4df2c4454bb768725c1a90a3b', '6562是范德萨发2222', '/blog/images/zd02.jpg', '法国恢复供货', '<p>焚膏继晷<br/></p>', '学习', '0', null, '2018-08-23 20:43', null, '0', '1');
INSERT INTO `t_art` VALUES ('5fb63bb8bb674194b45edb538ed5d18f', '花开花落', 'http://localhost:9090/admin/images/T_1535161409878R_312849570.JPG', '2222', '<p>34343</p><p><br/></p><p>的施工方式的郭德纲</p><p><br/></p><p><br/></p><p>第三个是的法国大使馆</p><p><br/></p><p>的水果蛋糕</p><p><img src=\"http://localhost:9090/admin/image/ueditor/jsp/upload/image/20180825/1535161289420032560.jpg\" title=\"1535161289420032560.jpg\"/></p><p><img src=\"http://localhost:9090/admin/image/ueditor/jsp/upload/image/20180825/1535161289487078380.jpg\" title=\"1535161289487078380.jpg\"/></p><p>更符合法规鸡飞狗叫<br/></p>', '1111', '0', null, '2018-08-24 23:38', '2018-08-25 09:44', '4', '1');
INSERT INTO `t_art` VALUES ('6190acb838a64905b7905608469ef0f8', 'dfhdfh', '/blog/images/zd02.jpg', '法国恢复供货', '<p>焚膏继晷<br/></p>', '学习', '0', null, '2018-08-23 20:47', '2018-08-24 00:10', '32', '1');
INSERT INTO `t_art` VALUES ('6a3bbd86827545cbb1967d38ba8dec2f', 'dgdg费的贵湿的个盹符是范德萨发2222', '/blog/images/zd02.jpg', '法国恢复供货', '<p>焚膏继晷<br/></p>', '学习', '0', null, '2018-08-23 20:46', null, '0', '1');
INSERT INTO `t_art` VALUES ('6a5e520f8dcb4fac866d44f3fcc4ad22', 'jljl盹符是范德萨发2222', '/blog/images/zd02.jpg', '法国恢复供货', '<p>焚膏继晷<br/></p>', '学习', '0', null, '2018-08-23 20:46', null, '0', '1');
INSERT INTO `t_art` VALUES ('6af1b1c9dcca43d1be72d839ecff576d', '分隔符是范德萨发2222', '/blog/images/zd02.jpg', '法国恢复供货', '<p>焚膏继晷<br/></p>', '学习', '0', null, '2018-08-23 20:43', null, '0', '1');
INSERT INTO `t_art` VALUES ('6dcd2c9a605e46efbac1d52b5c9564ef', '苟富贵湿的个盹符是范德萨发2222', '/blog/images/zd02.jpg', '法国恢复供货', '<p>焚膏继晷<br/></p>', '学习', '0', null, '2018-08-23 20:46', null, '0', '1');
INSERT INTO `t_art` VALUES ('6ef6c34518cc451eb40062399ab1bfd8', '是范德萨发2222', '/blog/images/zd02.jpg', '法国恢复供货', '<p>焚膏继晷<br/></p>', '学习', '0', null, '2018-08-23 20:43', null, '0', '1');
INSERT INTO `t_art` VALUES ('7142ea4fbfe741fb85fbc76e762c00e0', '是范德萨发', '/blog/images/zd02.jpg', '法国恢复供货', '<p>焚膏继晷<br/></p>', '学习', '0', null, '2018-08-23 20:42', null, '0', '1');
INSERT INTO `t_art` VALUES ('75b1ce572ebc4ed19f791b77143527c5', 'hgkhjk', '/blog/images/zd02.jpg', '法国恢复供货', '<p>焚膏继晷<br/></p>', '学习', '0', null, '2018-08-23 20:47', null, '19', '1');
INSERT INTO `t_art` VALUES ('760b86ef15924072bf4b16848c97741f', 'vgjghjh', '/blog/images/zd02.jpg', '法国恢复供货', '<p>焚膏继晷<br/></p>', '学习', '0', null, '2018-08-23 20:47', null, '8', '1');
INSERT INTO `t_art` VALUES ('81297145d5eb4e4792fd749601d8e79d', '电饭锅电饭锅', '/blog/images/zd03.jpg', '负担和东方红东方', '<p>东方红东方红<br/></p>', '学习', '0', null, '2018-08-22 22:30', null, '0', '1');
INSERT INTO `t_art` VALUES ('9702695e1ff9412e91cbc4579c5d7547', '学习符是范德萨发2222', '/blog/images/zd02.jpg', '法国恢复供货', '<p>焚膏继晷<br/></p>', '学习', '0', null, '2018-08-23 20:45', null, '0', '1');
INSERT INTO `t_art` VALUES ('a1aa52b4849b471eb96c74b8cdf31a69', '222是范德萨发2222', '/blog/images/zd02.jpg', '法国恢复供货', '<p>焚膏继晷<br/></p>', '学习', '0', null, '2018-08-23 20:43', null, '0', '1');
INSERT INTO `t_art` VALUES ('a597700c062f40408d6c9c4f57212f7b', 'cbdfgfg', '/blog/images/zd03.jpg', '大哥大法官', '<p>东方红东方红<br/></p>', '学习', '0', null, '2018-08-22 22:28', null, '0', '1');
INSERT INTO `t_art` VALUES ('ad52c75eae10428b9d6055ea25f4ee26', '大哥大法官2222', '/blog/images/zd03.jpg', '的发挥发挥', '<p>电饭锅和高房价<br/></p>', '学习', '0', null, '2018-08-22 22:32', null, '0', '1');
INSERT INTO `t_art` VALUES ('afb26bb2c8f34a55965ff2e3b9853534', 'hkghk湿的个盹符是范德萨发2222', '/blog/images/zd02.jpg', '法国恢复供货', '<p>焚膏继晷<br/></p>', '学习', '0', null, '2018-08-23 20:46', null, '0', '1');
INSERT INTO `t_art` VALUES ('d8d6251aad674a98b66a5c3247df48ae', 'bcvnvn2222', '/blog/images/zd02.jpg', '法国恢复供货', '<p>焚膏继晷<br/></p>', '学习', '0', null, '2018-08-23 20:47', null, '0', '1');
INSERT INTO `t_art` VALUES ('ee3dc277fa4949e3a8a4b6ca35a08d36', 'jk;jk;德萨发2222', '/blog/images/zd02.jpg', '法国恢复供货', '<p>焚膏继晷<br/></p>', '学习', '0', null, '2018-08-23 20:46', null, '0', '1');
INSERT INTO `t_art` VALUES ('f6fdee39847745629fb7895c6d5320b4', 'hmbkhj', '/blog/images/zd02.jpg', '法国恢复供货', '<p>焚膏继晷<br/></p>', '学习', '0', null, '2018-08-23 20:47', null, '1', '1');
INSERT INTO `t_art` VALUES ('fa3f17abdd2a46fab43acacf3bc98cfb', '电饭锅东方红东方红发货的发货电饭锅东方红东方红发货的发货电饭锅东方红东方红发货的发货电饭锅东方红东方', '/blog/images/zd02.jpg', '法国恢复供货法国恢复供货法国恢复供货法国恢复供货法国恢复供货法国恢复供货法国恢复供货法国恢复供货法国', '<p>焚膏继晷<br/></p>', '学习', '0', null, '2018-08-23 20:47', '2018-08-23 21:30', '4', '1');

-- ----------------------------
-- Table structure for t_art_label
-- ----------------------------
DROP TABLE IF EXISTS `t_art_label`;
CREATE TABLE `t_art_label` (
  `id` varchar(100) NOT NULL DEFAULT '',
  `art_id` varchar(100) DEFAULT '',
  `label_id` varchar(100) DEFAULT '1',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Records of t_art_label
-- ----------------------------
INSERT INTO `t_art_label` VALUES ('1d4f7c09e9ad436abcfc8f5823a6e1f0', '1071fbf8c445c444d83fa9a73417177a4', '2071fbf8c445c444d83fa9a73417177a4');
INSERT INTO `t_art_label` VALUES ('22d6fc0abaec4477bcf1088dc7623878', '1071fbf8c445c444d83fa9a73417177a4', '4071fbf8c445c444d83fa9a73417177a4');
INSERT INTO `t_art_label` VALUES ('2481c1c679e74830a631248c094840b1', '6190acb838a64905b7905608469ef0f8', '1071fbf8c445c444d83fa9a73417177a4');
INSERT INTO `t_art_label` VALUES ('2da1b2f9ae804396b2ff8052a87ff032', '1071fbf8c445c444d83fa9a73417177a4', '1071fbf8c445c444d83fa9a73417177a4');
INSERT INTO `t_art_label` VALUES ('37daa75f8eed44e8a0fc79310babab3a', '6190acb838a64905b7905608469ef0f8', '071fbf8c445c444d83fa9a73417177a4');
INSERT INTO `t_art_label` VALUES ('3a4307653f01466986627952b7df0534', '1071fbf8c445c444d83fa9a73417177a4', '5071fbf8c445c444d83fa9a73417177a4');
INSERT INTO `t_art_label` VALUES ('40698ea8ddd34f359aec09db15f5097c', '1071fbf8c445c444d83fa9a73417177a4', '071fbf8c445c444d83fa9a73417177a4');
INSERT INTO `t_art_label` VALUES ('45fc91c48216418ea23a7a1ef6d3ea4e', '6190acb838a64905b7905608469ef0f8', '5071fbf8c445c444d83fa9a73417177a4');
INSERT INTO `t_art_label` VALUES ('5196e2754b6e40828049b3230e627a2f', '6190acb838a64905b7905608469ef0f8', '3071fbf8c445c444d83fa9a73417177a4');
INSERT INTO `t_art_label` VALUES ('5468c17717fa4e85ab6cce8b22b31ebb', '5fb63bb8bb674194b45edb538ed5d18f', '3071fbf8c445c444d83fa9a73417177a4');
INSERT INTO `t_art_label` VALUES ('5cf9d3c581764cfba24bd0eb4f375588', '032783f5233348f485e47374335b511c', '071fbf8c445c444d83fa9a73417177a4');
INSERT INTO `t_art_label` VALUES ('678bc87e833b4ef3a90f729138a373ab', '1071fbf8c445c444d83fa9a73417177a4', '3071fbf8c445c444d83fa9a73417177a4');
INSERT INTO `t_art_label` VALUES ('70a2283571bc415bafece11134639f7c', '01a1291e0a7545009b5902a4addeca69', '4071fbf8c445c444d83fa9a73417177a4');
INSERT INTO `t_art_label` VALUES ('8e46ebaf5b814892964e4ff03c9bc793', '6190acb838a64905b7905608469ef0f8', '2071fbf8c445c444d83fa9a73417177a4');
INSERT INTO `t_art_label` VALUES ('acb4e3db57ab409a82916a3d38cb75a8', '01a1291e0a7545009b5902a4addeca69', '6410066840774722ad746d8b0f63bee4');
INSERT INTO `t_art_label` VALUES ('c5518683cfa34cb0b28c5590560db3a7', '6190acb838a64905b7905608469ef0f8', '4071fbf8c445c444d83fa9a73417177a4');
INSERT INTO `t_art_label` VALUES ('cd83a6d04dc04ef49e9a9b1cbda3434c', '6190acb838a64905b7905608469ef0f8', '6410066840774722ad746d8b0f63bee4');
INSERT INTO `t_art_label` VALUES ('f2efd24a7b6e4bb281f1ffb06ee044bf', '071fbf8c445c444d83fa9a73417177a4', '071fbf8c445c444d83fa9a73417177a4');
INSERT INTO `t_art_label` VALUES ('fa3a0cc2a4f84579bb8150564a1697eb', '032783f5233348f485e47374335b511c', '1071fbf8c445c444d83fa9a73417177a4');

-- ----------------------------
-- Table structure for t_label
-- ----------------------------
DROP TABLE IF EXISTS `t_label`;
CREATE TABLE `t_label` (
  `id` varchar(100) NOT NULL DEFAULT '',
  `name` varchar(100) DEFAULT '',
  `sort` int(8) DEFAULT '1',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Records of t_label
-- ----------------------------
INSERT INTO `t_label` VALUES ('071fbf8c445c444d83fa9a73417177a4', 'Java', '1');
INSERT INTO `t_label` VALUES ('1071fbf8c445c444d83fa9a73417177a4', 'Spring', '2');
INSERT INTO `t_label` VALUES ('2071fbf8c445c444d83fa9a73417177a4', 'SpringBoot', '3');
INSERT INTO `t_label` VALUES ('3071fbf8c445c444d83fa9a73417177a4', 'Dubbo', '4');
INSERT INTO `t_label` VALUES ('4071fbf8c445c444d83fa9a73417177a4', 'Zookeeper', '5');
INSERT INTO `t_label` VALUES ('5071fbf8c445c444d83fa9a73417177a4', 'Java多线程', '6');
INSERT INTO `t_label` VALUES ('6410066840774722ad746d8b0f63bee4', 'SpringCloud', '7');
INSERT INTO `t_label` VALUES ('97f0748432734efd97223379e5d29143', 'Hibernate', '999');
INSERT INTO `t_label` VALUES ('b820392bb13044158a2893bab2baa9a6', 'Mybatis', '999');
INSERT INTO `t_label` VALUES ('cda4d3bfebce4520a3f56dc57a1e3cac', 'Mysql', '999');

-- ----------------------------
-- Table structure for t_material
-- ----------------------------
DROP TABLE IF EXISTS `t_material`;
CREATE TABLE `t_material` (
  `id` varchar(100) NOT NULL DEFAULT '',
  `name` varchar(300) DEFAULT '',
  `url` varchar(300) DEFAULT '1',
  `diskPath` varchar(300) DEFAULT NULL,
  `type` varchar(100) DEFAULT NULL,
  `status` int(2) DEFAULT NULL,
  `createTime` varchar(100) DEFAULT NULL,
  `updateTime` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Records of t_material
-- ----------------------------
INSERT INTO `t_material` VALUES ('4f3e7ec2e9e7485b9c4d127729b15228', 'xxxx', 'http://localhost:9090/admin/images/T_1535125091553R_964708512.png', 'D:/temp/T_1535125091553R_964708512.png', 'png', '1', '2018-08-24 23:38', '');

-- ----------------------------
-- Table structure for t_system_meun
-- ----------------------------
DROP TABLE IF EXISTS `t_system_meun`;
CREATE TABLE `t_system_meun` (
  `id` varchar(100) NOT NULL DEFAULT '',
  `name` varchar(16) DEFAULT '',
  `url` varchar(300) DEFAULT NULL,
  `descM` text,
  `createTime` varchar(100) DEFAULT '',
  `updateTime` varchar(100) DEFAULT '',
  `statuses` int(2) DEFAULT NULL,
  `sort` int(2) DEFAULT NULL,
  `parentId` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Records of t_system_meun
-- ----------------------------
INSERT INTO `t_system_meun` VALUES ('1', '系统菜单', '1', '3', '', '', '1', '1', '0');
INSERT INTO `t_system_meun` VALUES ('2', '文章管理', '2', '3', '', '', '1', '2', '0');
INSERT INTO `t_system_meun` VALUES ('3', '标签管理', '3', '3', '', '', '1', '3', '0');
INSERT INTO `t_system_meun` VALUES ('4', '菜单管理', '4', '3', '', '', '1', '1', '1');
INSERT INTO `t_system_meun` VALUES ('5', '角色管理', '5', '7', '', '', '1', '1', '1');
INSERT INTO `t_system_meun` VALUES ('6', '用户管理', '6', '5', '', '', '1', '1', '1');
INSERT INTO `t_system_meun` VALUES ('7', '文章列表', '5', '7', '', '', '1', '1', '2');
INSERT INTO `t_system_meun` VALUES ('8', '标签列表', '4', '6', '', '', '1', '1', '3');

-- ----------------------------
-- Table structure for t_system_role
-- ----------------------------
DROP TABLE IF EXISTS `t_system_role`;
CREATE TABLE `t_system_role` (
  `id` varchar(100) NOT NULL DEFAULT '',
  `name` varchar(16) DEFAULT '',
  `descM` text,
  `createTime` varchar(100) DEFAULT '',
  `updateTime` varchar(100) DEFAULT '',
  `statuses` int(2) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Records of t_system_role
-- ----------------------------
INSERT INTO `t_system_role` VALUES ('0239b8d0ff524c36b2c9bbf6886f0e4f', '管理员', '管理员，拥有系统运维权限。', '2018-08-25 15:33', '', '1');
INSERT INTO `t_system_role` VALUES ('de5f9dca1763468dbde7b6c819d7b060', '超级管理员', '超级管理员，拥有最大权限，能分配权限给其他管理员。', '2018-08-25 15:24', '', '1');

-- ----------------------------
-- Table structure for t_system_role_menu
-- ----------------------------
DROP TABLE IF EXISTS `t_system_role_menu`;
CREATE TABLE `t_system_role_menu` (
  `id` varchar(100) NOT NULL DEFAULT '',
  `meun_id` varchar(100) DEFAULT '',
  `role_id` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Records of t_system_role_menu
-- ----------------------------
